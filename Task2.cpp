// Satheyaseelan Sugieethan
// ID: 20318670
//------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------
#include <iostream> // Required for cout
#include <math.h> // Required for M_PI, cos, sin
//------------------------------------------------------------------------------------------------------------------------
//Templated function 'plot' - takes the object and plots the appropriate values using functor
//------------------------------------------------------------------------------------------------------------------------
template <typename CURVE>
void plot(const CURVE& plotArc) {
    float x,y;
    for (float t = 0; t < 1; t+=0.01) {
        plotArc(t,x,y); // calls functor in class and returns x and y value
        std::cout << "\n" << t << " " << x << " " << y;
    }   // if I was allowed to change plot function i would add specific decimal point accuracy to ensure
}       // the printing looked neater for user and wasn't affected by float point precision
//------------------------------------------------------------------------------------------------------------------------
// Templated Class 'circularArc' characterised by an origin, radius and an angle, a
//------------------------------------------------------------------------------------------------------------------------
template <typename T>
class circularArc{
    public:                             // const as variable doesn't change during runtime
        circularArc (const T* const _origin, const T _radius, const T _a) : radius(_radius), a(_a) {// Constructor
                                                                            origin[0] = _origin[0];
                                                                            origin[1] = _origin[1];}
        ~circularArc() {};                                                                          // Destructor
        circularArc(const circularArc& obj) {radius = obj.radius; origin = obj.origin; a = obj.a;}  // Copy Constructor
        circularArc& operator=(const circularArc& obj) {if(this==&obj) return(*this);               // Assignment
                                                        radius = obj.radius;
                                                        origin = obj.origin;
                                                        a = obj.a;
                                                        return(*this);}

        void operator() (T t, T& x, T& y) const {           // Functor for x and y coordinate calculations
            x = (origin[0] + (radius * (cos (t * a)))); 
            y = (origin[1] + (radius * (sin (t * a))));
        }
                // Dont need sets and gets as you are purposely trying to protect your class
    private:
        T origin[2], radius, a;
};
//------------------------------------------------------------------------------------------------------------------------
// Main program to demonstrate the use of 'plot' template function and functor in class
//------------------------------------------------------------------------------------------------------------------------
int main() {
    float origin[2] = {1,1};    // store origin coordinates in array
    circularArc<float>plotObject(origin, 1,1);  // create object and initialise
    plot(plotObject);   // call template function that contains ability to call functor and print values

    return 0;
}
//------------------------------------------------------------------------------------------------------------------------
// Successful output of function when origin = {1,1} and radius = 1 and angle = 1
//------------------------------------------------------------------------------------------------------------------------
// 0 2 1
// 0.01 1.99995 1.01
// 0.02 1.9998 1.02
// 0.03 1.99955 1.03
// 0.04 1.9992 1.03999
// 0.05 1.99875 1.04998
// 0.06 1.9982 1.05996
// 0.07 1.99755 1.06994
// 0.08 1.9968 1.07991
// 0.09 1.99595 1.08988
// 0.1 1.995 1.09983
// 0.11 1.99396 1.10978
// 0.12 1.99281 1.11971
// 0.13 1.99156 1.12963
// 0.14 1.99022 1.13954
// 0.15 1.98877 1.14944
// 0.16 1.98723 1.15932
// 0.17 1.98558 1.16918
// 0.18 1.98384 1.17903
// 0.19 1.982 1.18886
// 0.2 1.98007 1.19867
// 0.21 1.97803 1.20846
// 0.22 1.9759 1.21823
// 0.23 1.97367 1.22798
// 0.24 1.97134 1.2377
// 0.25 1.96891 1.2474
// 0.26 1.96639 1.25708
// 0.27 1.96377 1.26673
// 0.28 1.96106 1.27636
// 0.29 1.95824 1.28595
// 0.3 1.95534 1.29552
// 0.31 1.95233 1.30506
// 0.32 1.94924 1.31457
// 0.33 1.94604 1.32404
// 0.34 1.94275 1.33349
// 0.35 1.93937 1.3429
// 0.36 1.9359 1.35227
// 0.37 1.93233 1.36162
// 0.38 1.92866 1.37092
// 0.39 1.92491 1.38019
// 0.4 1.92106 1.38942
// 0.41 1.91712 1.39861
// 0.42 1.91309 1.40776
// 0.43 1.90897 1.41687
// 0.44 1.90475 1.42594
// 0.45 1.90045 1.43497
// 0.46 1.89605 1.44395
// 0.47 1.89157 1.45289
// 0.48 1.887 1.46178
// 0.49 1.88233 1.47063
// 0.5 1.87758 1.47943
// 0.51 1.87274 1.48818
// 0.52 1.86782 1.49688
// 0.53 1.86281 1.50553
// 0.54 1.85771 1.51414
// 0.55 1.85252 1.52269
// 0.56 1.84726 1.53119
// 0.57 1.8419 1.53963
// 0.58 1.83646 1.54802
// 0.59 1.83094 1.55636
// 0.6 1.82534 1.56464
// 0.61 1.81965 1.57287
// 0.62 1.81388 1.58103
// 0.63 1.80803 1.58914
// 0.64 1.8021 1.5972
// 0.65 1.79608 1.60519
// 0.66 1.78999 1.61312
// 0.67 1.78382 1.62099
// 0.68 1.77757 1.62879
// 0.69 1.77125 1.63654
// 0.7 1.76484 1.64422
// 0.71 1.75836 1.65183
// 0.72 1.75181 1.65938
// 0.73 1.74517 1.66687
// 0.74 1.73847 1.67429
// 0.75 1.73169 1.68164
// 0.76 1.72484 1.68892
// 0.77 1.71791 1.69613
// 0.78 1.71091 1.70328
// 0.79 1.70385 1.71035
// 0.8 1.69671 1.71736
// 0.81 1.6895 1.72429
// 0.82 1.68222 1.73115
// 0.83 1.67488 1.73793
// 0.839999 1.66746 1.74464
// 0.849999 1.65998 1.75128
// 0.859999 1.65244 1.75784
// 0.869999 1.64483 1.76433
// 0.879999 1.63715 1.77074
// 0.889999 1.62941 1.77707
// 0.899999 1.62161 1.78333
// 0.909999 1.61375 1.7895
// 0.919999 1.60582 1.7956
// 0.929999 1.59783 1.80162
// 0.939999 1.58979 1.80756
// 0.949999 1.58168 1.81342
// 0.959999 1.57352 1.81919
// 0.969999 1.5653 1.82489
// 0.979999 1.55702 1.8305
// 0.989999 1.54869 1.83603
// 0.999999 1.5403 1.84147
//--------------------------------------------------------------------------------------------------------
